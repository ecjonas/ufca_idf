# -*- coding: utf-8 -*-
"""
/***************************************************************************
 UFCAIDF
                                 A QGIS plugin
 Lê dados de chuva para gerar equação IDF
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-05-18
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Laboratório de Recursos Hídricos (LAHI) - UFCA
        email                : jonas.nunes@aluno.ufca.edu.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


from qgis.utils import *
from qgis.PyQt.QtCore import *
from qgis.core import *
from qgis.gui import  *
from qgis.PyQt.QtWidgets import *
from qgis.utils import *
from qgis.PyQt.QtGui import*
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog, QTableWidget, QTableWidgetItem, QMessageBox, QDialog



# Inicializa recursos Qt do arquivo resources.py
from .resources import *

#Importa o código das dialogs
from .UFCA_IDF_dialog import UFCAIDFDialog
from .dialog_dados_estatisticos import dialogDadosEstatisticos
from .dialog_calculo_final import dialogCalculoFinal
from .dialog_resumo_distribuicoes import dialogResumoDistribuicoes
from .dialog_ANA import dialogANA
from .dialog_indice_comparacao import dialogIndiceComparacao
from .dialog_qui_quadrado import dialogQuiQuadrado
from .dialog_editar_linha import dialogEditarLinha
from .dialog_entrada_manual import dialogEntradaManual
from .dialog_kolmogorov_smirnov import dialogKolmogorovSmirnov
from .funcoes import*
from .savePDF import Save_PDF



#Importa as bibliotecas python
import math
import os.path



class UFCAIDF:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'UFCAIDF_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&UFCA-IDF')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('UFCAIDF', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def updateCidadeCombo(self):
        self.abrir_dialogo_ANA.boxCidade.clear()
        cidade = dadosArquivo.loc[dadosArquivo['UF']==self.abrir_dialogo_ANA.boxUF.currentText(),'Cidade']
        cidade = cidade.drop_duplicates()
        cidade = cidade.values
        cidade.sort()
        for i in range(len(cidade)):
            self.abrir_dialogo_ANA.boxCidade.addItem(cidade[i])

    def updatePostoCombo(self):
        self.abrir_dialogo_ANA.boxPosto.clear()
        posto = dadosArquivo.loc[dadosArquivo['Cidade']==self.abrir_dialogo_ANA.boxCidade.currentText(),'Nome_Posto']
        posto = posto.values
        posto.sort()
        for i in range(len(posto)):
            self.abrir_dialogo_ANA.boxPosto.addItem(posto[i])


    def clikSelecionar(self):    
        mapcanvas = iface.mapCanvas()
        layers = mapcanvas.layers()
        if len(layers)==14:
            QgsProject.instance().removeMapLayer(layers[0].id())
        codigo = int(dadosArquivo.loc[(dadosArquivo['Cidade']==self.abrir_dialogo_ANA.boxCidade.currentText()) &
                                  (dadosArquivo['Nome_Posto']==self.abrir_dialogo_ANA.boxPosto.currentText()),'Codigo'] )
        codigo = str(codigo)
        if len(codigo)==6:
            codigo = '00'+ codigo
        else:
            codigo = '0'+ codigo
        plugin_dir = self.getPlugin()
        arquivo = plugin_dir +'\postos/'+self.abrir_dialogo_ANA.boxUF.currentText()+'/chuvas_C_'+codigo+'.txt'
        self.preencheDialogbase(arquivo)
        self.pontoSelecionado()
        
    def preencheDialogbase(self,arquivo):
        global lat
        global long
        global dados
        dados, informacao = lerArquivo(arquivo)
        lat = informacao[3][1]
        long = informacao[4][1]
        self.abrir_dialogo_inicio.txtUF.setText(informacao[0][1])
        self.abrir_dialogo_inicio.txtCidade.setText(informacao[1][1])
        self.abrir_dialogo_inicio.txtPosto.setText(informacao[2][1])
        self.abrir_dialogo_inicio.txtLatitude.setText(informacao[3][1])
        self.abrir_dialogo_inicio.txtLongitude.setText(informacao[4][1])
        self.abrir_dialogo_inicio.txtCodigo.setText(informacao[5][1])
        self.tabelaPrecipitacao(dados)
        return lat, long
        
    def clickArquivo(self):
        try:
            global lat
            global long
            dados, informacao = filestring()
            lat = informacao[3][1]
            long = informacao[4][1]
            mapcanvas = iface.mapCanvas()
            layers = mapcanvas.layers()
            if len(layers)==14:
                QgsProject.instance().removeMapLayer(layers[0].id())
            self.abrir_dialogo_inicio.txtUF.setText(informacao[0][1])
            self.abrir_dialogo_inicio.txtCidade.setText(informacao[1][1])
            self.abrir_dialogo_inicio.txtPosto.setText(informacao[2][1])
            self.abrir_dialogo_inicio.txtLatitude.setText(informacao[3][1])
            self.abrir_dialogo_inicio.txtLongitude.setText(informacao[4][1])
            self.abrir_dialogo_inicio.txtCodigo.setText(informacao[5][1])
            self.tabelaPrecipitacao(dados)
            self.pontoSelecionado()
            return lat, long
        except:
            pass

    
    def dadosPrecipitacao(self):
        global precipitacao
        global maximas
        global isozona
        precipitacao = []
        for i in range(0,self.abrir_dialogo_inicio.tableValores.rowCount(),1):
            precipitacao.append([self.abrir_dialogo_inicio.tableValores.item(i,0).text(),self.abrir_dialogo_inicio.tableValores.item(i,1).text()])
            
        maximas = []
        for i in range(len(precipitacao)):
            maximas.append(float(precipitacao[i][1]))
        isozona = self.isozonaLocalizacaoPosto()
        return precipitacao, maximas, isozona
    
    def clickCalculoEstatistica(self):
        global qntAnos, md, var, dp, ca
        for i in range (len(precipitacao)):
            rowPosition = self.abrir_dialogo.tableValores.rowCount()
            self.abrir_dialogo.tableValores.insertRow(rowPosition)
            newItem1 =QTableWidgetItem(str(precipitacao[rowPosition][0]))
            newItem1.setTextAlignment(QtCore.Qt.AlignCenter)
            newItem2 =QTableWidgetItem(str(precipitacao[rowPosition][1]))
            newItem2.setTextAlignment(QtCore.Qt.AlignCenter)
            self.abrir_dialogo.tableValores.setItem(rowPosition,0, newItem1 )
            self.abrir_dialogo.tableValores.setItem(rowPosition,1, newItem2)
            
        numClasses, maximaSeries, amplitudeTotal, intervaloClasse, tabelaFrequencia = tabelaDistricuicaoFrequencia(maximas)
        
        for i in range (numClasses):
            self.abrir_dialogo.tabelaDistribuicaoFrequencias.insertRow(i)
            self.abrir_dialogo.tabelaDistribuicaoFrequencias.setItem(i,0, QTableWidgetItem(str(tabelaFrequencia[0][i]) + ' |-- ' + str(tabelaFrequencia[1][i])))
            self.abrir_dialogo.tabelaDistribuicaoFrequencias.setItem(i,1, QTableWidgetItem(str(tabelaFrequencia[2][i])))
            self.abrir_dialogo.tabelaDistribuicaoFrequencias.setItem(i,2, QTableWidgetItem(str(tabelaFrequencia[3][i])))
            self.abrir_dialogo.tabelaDistribuicaoFrequencias.setItem(i,3, QTableWidgetItem(str(tabelaFrequencia[4][i])))
            self.abrir_dialogo.tabelaDistribuicaoFrequencias.setItem(i,4, QTableWidgetItem(str(tabelaFrequencia[5][i])))
            self.abrir_dialogo.tabelaDistribuicaoFrequencias.setItem(i,5, QTableWidgetItem(str(tabelaFrequencia[6][i])))
            

        
        qntAnos = str(round(len(precipitacao),2))
        md = str(round(maximaSeries.mean(),2))
        var = str(round(maximaSeries.var(),2))
        dp = str(round(maximaSeries.std(),2))
        ca = str(round(maximaSeries.skew(),3))
            
        self.abrir_dialogo.txtNumeroAno.setText(qntAnos)
        self.abrir_dialogo.txtMedia.setText(md)
        self.abrir_dialogo.txtVariancia.setText(var)
        self.abrir_dialogo.txtDesvioPadrao.setText(dp)
        self.abrir_dialogo.txtCoeficienteAssimetria.setText(ca)
        self.abrir_dialogo.txtNumeroClasses.setText(str(numClasses))
        self.abrir_dialogo.txtAmplitudeTotal.setText(str(round(amplitudeTotal,2)))
        self.abrir_dialogo.txtAmplitudeClasses.setText(str(round(intervaloClasse,2)))
        return qntAnos, md, var, dp, ca
 
    def clickMostrarResultados(self):
        for i in range(1,6):
            numClasses, matrizQui = testeQuiQuadrado(i, maximas)
            somaColunas = matrizQui.sum(axis=0)
            valores = matrizQuiQuadrado(numClasses)
            estatTest2P = valores.valor2P
            DQM, DQR, DPMA, coefAng, coefR2, matrizIC = indiceComparacao(i, maximas)
            matrizKS, ks_calculado = kolmogorov_smirnov_calculado(i, maximas)
            ks_critico = kolmogorov_smirnov_critico(maximas)
            if i == 1:
                self.abrir_dialogo.txtEstatisticaGammaII.setText(str(round(estatTest2P,3)))
                self.abrir_dialogo.txtX2GammaII.setText(str(round(somaColunas[5],3)))
                self.abrir_dialogo.txtDQMGammaII.setText(str(round(DQM,3)))
                self.abrir_dialogo.txtDQRGammaII.setText(str(round(DQR,3)))
                self.abrir_dialogo.txtDPMAGammaII.setText(str(round(DPMA,3)))
                self.abrir_dialogo.txtCoefAngGammaII.setText(str(round(coefAng,3)))
                self.abrir_dialogo.txtR2GammaII.setText(str(round(coefR2,3)))
                self.abrir_dialogo.txtValorCritKSGammaII.setText(str(round(ks_critico,3)))
                self.abrir_dialogo.txtValorCalcKSGammaII.setText(str(round(ks_calculado,3)))
            if i == 2:
                self.abrir_dialogo.txtEstatisticaGammaIII.setText(str(round(estatTest2P,3)))
                self.abrir_dialogo.txtX2GammaIII.setText(str(round(somaColunas[5],3)))
                self.abrir_dialogo.txtDQMGammaIII.setText(str(round(DQM,3)))
                self.abrir_dialogo.txtDQRGammaIII.setText(str(round(DQR,3)))
                self.abrir_dialogo.txtDPMAGammaIII.setText(str(round(DPMA,3)))
                self.abrir_dialogo.txtCoefAngGammaIII.setText(str(round(coefAng,3)))
                self.abrir_dialogo.txtR2GammaIII.setText(str(round(coefR2,3)))
                self.abrir_dialogo.txtValorCritKSGammaIII.setText(str(round(ks_critico,3)))
                self.abrir_dialogo.txtValorCalcKSGammaIII.setText(str(round(ks_calculado,3)))
            if i == 3:
                self.abrir_dialogo.txtEstatisticaLognormalII.setText(str(round(estatTest2P,3)))
                self.abrir_dialogo.txtX2LognormalII.setText(str(round(somaColunas[5],3)))
                self.abrir_dialogo.txtDQMLognormalII.setText(str(round(DQM,3)))
                self.abrir_dialogo.txtDQRLognormalII.setText(str(round(DQR,3)))
                self.abrir_dialogo.txtDPMALognormalII.setText(str(round(DPMA,3)))
                self.abrir_dialogo.txtCoefAngLognormalII.setText(str(round(coefAng,3)))
                self.abrir_dialogo.txtR2LognormalII.setText(str(round(coefR2,3)))
                self.abrir_dialogo.txtValorCritKSLognormalII.setText(str(round(ks_critico,3)))
                self.abrir_dialogo.txtValorCalcKSLognormalII.setText(str(round(ks_calculado,3)))
            if i == 4:
                self.abrir_dialogo.txtEstatisticaLognormalIII.setText(str(round(estatTest2P,3)))
                self.abrir_dialogo.txtX2LognormalIII.setText(str(round(somaColunas[5],3)))
                self.abrir_dialogo.txtDQMLognormalIII.setText(str(round(DQM,3)))
                self.abrir_dialogo.txtDQRLognormalIII.setText(str(round(DQR,3)))
                self.abrir_dialogo.txtDPMALognormalIII.setText(str(round(DPMA,3)))
                self.abrir_dialogo.txtCoefAngLognormalIII.setText(str(round(coefAng,3)))
                self.abrir_dialogo.txtR2LognormalIII.setText(str(round(coefR2,3)))
                self.abrir_dialogo.txtValorCritKSLognormalIII.setText(str(round(ks_critico,3)))
                self.abrir_dialogo.txtValorCalcKSLognormalIII.setText(str(round(ks_calculado,3)))
            if i == 5:
                self.abrir_dialogo.txtEstatisticaGumbel.setText(str(round(estatTest2P,3)))
                self.abrir_dialogo.txtX2Gumbel.setText(str(round(somaColunas[5],3)))
                self.abrir_dialogo.txtDQMGumbel.setText(str(round(DQM,3)))
                self.abrir_dialogo.txtDQRGumbel.setText(str(round(DQR,3)))
                self.abrir_dialogo.txtDPMAGumbel.setText(str(round(DPMA,3)))
                self.abrir_dialogo.txtCoefAngGumbel.setText(str(round(coefAng,3)))
                self.abrir_dialogo.txtR2Gumbel.setText(str(round(coefR2,3)))
                self.abrir_dialogo.txtValorCritKSGumbel.setText(str(round(ks_critico,3)))
                self.abrir_dialogo.txtValorCalcKSGumbel.setText(str(round(ks_calculado,3)))
    
    def clickCalcularQuiQuadrado(self):
        numClasses, matrizQui = testeQuiQuadrado(numDist, maximas)
        valores = matrizQuiQuadrado(numClasses)
        estatTest2P = valores.valor2P
        grauLib2P = int(valores.gl2P)
        somaColunas = matrizQui.sum(axis=0)
        for i in range (numClasses):
            self.abrir_dialogo_quiquadrado.tableCalculoComparacao.insertRow(i)
            self.abrir_dialogo_quiquadrado.tableCalculoComparacao.setItem(i,0, QTableWidgetItem(str(matrizQui[i][0]) + ' |-- ' + str(matrizQui[i][1])))
            self.abrir_dialogo_quiquadrado.tableCalculoComparacao.setItem(i,1, QTableWidgetItem(str(round((matrizQui[i][2]),3))))
            self.abrir_dialogo_quiquadrado.tableCalculoComparacao.setItem(i,2, QTableWidgetItem(str(round((matrizQui[i][3]),3))))
            self.abrir_dialogo_quiquadrado.tableCalculoComparacao.setItem(i,3, QTableWidgetItem(str(round((matrizQui[i][4]),3))))
            self.abrir_dialogo_quiquadrado.tableCalculoComparacao.setItem(i,4, QTableWidgetItem(str(round((matrizQui[i][5]),3))))
        self.abrir_dialogo_quiquadrado.txtGrauLiberdade.setText(str(grauLib2P))
        self.abrir_dialogo_quiquadrado.txtNivelInsignificancia.setText(str("5%"))
        self.abrir_dialogo_quiquadrado.txtEstatisticaTeste.setText(str(round(estatTest2P,3)))
        self.abrir_dialogo_quiquadrado.txtX2Calculada.setText(str(round(somaColunas[5],3)))
        if somaColunas[5]<estatTest2P:
            self.abrir_dialogo_quiquadrado.txtTomadaDecisao.append(str("Hipótese de aderência aceita"))
            self.abrir_dialogo_quiquadrado.txtTomadaDecisao.append(str("X² calculado ( % .3f" %somaColunas[5] + " ) < X² tabelado ( %.3f" %estatTest2P + ")."))
        else:
            self.abrir_dialogo_quiquadrado.txtTomadaDecisao.append(str("Hipótese de aderência rejeitada"))
            self.abrir_dialogo_quiquadrado.txtTomadaDecisao.append(str("X² calculado ( % .3f" %somaColunas[5] + " ) > X² tabelado ( %.3f" %estatTest2P + ")."))
    
    def clickCalcularIndiceComparacao(self):
        DQM, DQR, DPMA, coefAng, coefR2, matrizIC = indiceComparacao(numDist, maximas)
        for i in range (len(maximas)):
            self.abrir_dialogo_IndiceComparacao.tableIndiceComparacao.insertRow(i)
            for j in range(0,11):
                if j <= 1:
                    self.abrir_dialogo_IndiceComparacao.tableIndiceComparacao.setItem(i,j, QTableWidgetItem(str(round((matrizIC[i][j]),2))))
                else:
                    self.abrir_dialogo_IndiceComparacao.tableIndiceComparacao.setItem(i,j, QTableWidgetItem(str(round((matrizIC[i][j]),5))))
        self.abrir_dialogo_IndiceComparacao.txtDQM.setText(str(round(DQM,3)))
        self.abrir_dialogo_IndiceComparacao.txtDQR.setText(str(round(DQR,3)))
        self.abrir_dialogo_IndiceComparacao.txtDPMA.setText(str(round(DPMA,3)))
        self.abrir_dialogo_IndiceComparacao.txtB.setText(str(round(coefAng,3)))
        self.abrir_dialogo_IndiceComparacao.txtR2.setText(str(round(coefR2,3)))

    def clickCalcularKolmogorovSmirnov(self):
        matrizKS, ks_calculado = kolmogorov_smirnov_calculado(numDist, maximas)
        ks_critico = kolmogorov_smirnov_critico(maximas)
        for i in range (len(maximas)):
            self.abrir_dialogo_KolmogorovSmirnov.tableEstatisticaKS.insertRow(i)
            self.abrir_dialogo_KolmogorovSmirnov.tableEstatisticaKS.setItem(i,0, QTableWidgetItem(str(matrizKS[i][0])))
            self.abrir_dialogo_KolmogorovSmirnov.tableEstatisticaKS.setItem(i,1, QTableWidgetItem(str(round((matrizKS[i][2]),3))))
            self.abrir_dialogo_KolmogorovSmirnov.tableEstatisticaKS.setItem(i,2, QTableWidgetItem(str(round((matrizKS[i][4]),3))))
            self.abrir_dialogo_KolmogorovSmirnov.tableEstatisticaKS.setItem(i,3, QTableWidgetItem(str(round((matrizKS[i][5]),3))))
            self.abrir_dialogo_KolmogorovSmirnov.tableEstatisticaKS.setItem(i,4, QTableWidgetItem(str(round((matrizKS[i][6]),3))))
        self.abrir_dialogo_KolmogorovSmirnov.txtNivelSignificanciaKS.setText(str("5%"))
        self.abrir_dialogo_KolmogorovSmirnov.txtValorCriticoKS.setText(str(round(ks_critico,4)))
        self.abrir_dialogo_KolmogorovSmirnov.txtValorCalculadoKS.setText(str(round(ks_calculado,4)))
        if ks_calculado<ks_critico:
            self.abrir_dialogo_KolmogorovSmirnov.txtTomadaDecisaoKS.append(str("Não rejeita-se a hipótese dos dados seguindo a distribuição"))
            self.abrir_dialogo_KolmogorovSmirnov.txtTomadaDecisaoKS.append(str("D calculado ( % .4f" %ks_calculado + " ) < D crítico ( %.4f" %ks_critico + ")."))
        else:
            self.abrir_dialogo_KolmogorovSmirnov.txtTomadaDecisaoKS.append(str("Rejeita-se a hipótese dos dados seguindo a distribuição"))
            self.abrir_dialogo_KolmogorovSmirnov.txtTomadaDecisaoKS.append(str("D calculado ( % .3f" %ks_calculado + " ) > D crítico o ( %.4f" %ks_critico + ")."))



    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/UFCA_IDF/imagens/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'UFCA - IDF'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        self.abrir_dialogo_inicio = UFCAIDFDialog()
        self.abrir_dialogo_inicio.btnProximo.clicked.connect(self.clickDadosEstatistico)
        self.abrir_dialogo_inicio.btnManual.clicked.connect(self.clickManual)
        self.abrir_dialogo_inicio.btnArquivo.clicked.connect(self.clickArquivo)
        self.abrir_dialogo_inicio.btnMapa.clicked.connect(self.clickMapa)
        self.abrir_dialogo_inicio.btnAna.clicked.connect(self.clickANA)
        

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&UFCA-IDF'),
                action)
            self.iface.removeToolBarIcon(action)
    
    def clickANA (self):
        self.abrir_dialogo_ANA = dialogANA()
        self.abrir_dialogo_ANA.show()
        global dadosArquivo
        plugin_dir = self.getPlugin()
        arquivo = plugin_dir +'\postos_Brasil.txt'
        dadosArquivo, estado = dadosPostos(arquivo)
        for i in range(len(estado)):
            self.abrir_dialogo_ANA.boxUF.addItem(estado[i])
        self.abrir_dialogo_ANA.boxUF.currentTextChanged.connect(self.updateCidadeCombo)
        self.abrir_dialogo_ANA.boxCidade.currentTextChanged.connect(self.updatePostoCombo)
        self.abrir_dialogo_ANA.btnSelecionar.clicked.connect(self.clikSelecionar)
        self.abrir_dialogo_ANA.btnSelecionar.clicked.connect(self.abrir_dialogo_ANA.hide)
        return dadosArquivo
  
    def tabelaPrecipitacao(self, precipitacao):
        for i in reversed(range(self.abrir_dialogo_inicio.tableValores.rowCount())):
            self.abrir_dialogo_inicio.tableValores.removeRow(i)
        for i in range (len(precipitacao)):
            rowPosition = self.abrir_dialogo_inicio.tableValores.rowCount()
            self.abrir_dialogo_inicio.tableValores.insertRow(rowPosition)
            newItem1 =QTableWidgetItem(str(precipitacao[rowPosition][0]))
            newItem1.setTextAlignment(QtCore.Qt.AlignCenter)
            newItem2 =QTableWidgetItem(str(precipitacao[rowPosition][1]))
            newItem2.setTextAlignment(QtCore.Qt.AlignCenter)
            self.abrir_dialogo_inicio.tableValores.setItem(rowPosition,0, newItem1 )
            self.abrir_dialogo_inicio.tableValores.setItem(rowPosition,1, newItem2)


    
     
    def clickInserir(self):
        indice = self.abrir_dialogo_manual.tableDadosInseridos.rowCount()
        self.abrir_dialogo_manual.tableDadosInseridos.insertRow(indice)
        self.abrir_dialogo_manual.tableDadosInseridos.setItem(indice,0, QTableWidgetItem(self.abrir_dialogo_manual.txtAno.text()))
        self.abrir_dialogo_manual.tableDadosInseridos.setItem(indice,1, QTableWidgetItem(self.abrir_dialogo_manual.txtPrecipitacaoMaxima.text()))
        self.abrir_dialogo_manual.txtAno.clear()
        self.abrir_dialogo_manual.txtPrecipitacaoMaxima.clear()

    def clickManual(self):
        self.abrir_dialogo_manual = dialogEntradaManual()
        self.abrir_dialogo_manual.show()
        self.abrir_dialogo_manual.btnInserir.clicked.connect(self.clickInserir)
        self.abrir_dialogo_manual.btnEditar.clicked.connect(self.clickEditar)
        self.abrir_dialogo_manual.btnApagar.clicked.connect(self.clickApagar)
        self.abrir_dialogo_manual.btnSalvar.clicked.connect(self.clickSalvar)
        self.abrir_dialogo_manual.btnFechar.clicked.connect(self.clickFecharManual)

    def clickFecharManual(self):
        try:
            global lat
            global long
            lat = self.abrir_dialogo_manual.txtManualLatitude.text()
            long = self.abrir_dialogo_manual.txtManualLongitude.text()
            for i in reversed(range(self.abrir_dialogo_inicio.tableValores.rowCount())):
                self.abrir_dialogo_inicio.tableValores.removeRow(i)
            mapcanvas = iface.mapCanvas()
            layers = mapcanvas.layers()
            if len(layers)==14:
                QgsProject.instance().removeMapLayer(layers[0].id())
            self.abrir_dialogo_inicio.txtUF.setText(self.abrir_dialogo_manual.txtManualUF.text())
            self.abrir_dialogo_inicio.txtCidade.setText(self.abrir_dialogo_manual.txtManualCidade.text())
            self.abrir_dialogo_inicio.txtPosto.setText(self.abrir_dialogo_manual.txtManualPosto.text())
            self.abrir_dialogo_inicio.txtLatitude.setText(self.abrir_dialogo_manual.txtManualLatitude.text())
            self.abrir_dialogo_inicio.txtLongitude.setText(self.abrir_dialogo_manual.txtManualLongitude.text())
            self.abrir_dialogo_inicio.txtCodigo.setText(self.abrir_dialogo_manual.txtManualCodigo.text())
            for i in range(0,self.abrir_dialogo_manual.tableDadosInseridos.rowCount(),1):
                rowPosition = self.abrir_dialogo_inicio.tableValores.rowCount()
                self.abrir_dialogo_inicio.tableValores.insertRow(rowPosition)
                self.abrir_dialogo_inicio.tableValores.setItem(rowPosition,0, QTableWidgetItem(self.abrir_dialogo_manual.tableDadosInseridos.item(i,0).text()))
                self.abrir_dialogo_inicio.tableValores.setItem(rowPosition,1, QTableWidgetItem(self.abrir_dialogo_manual.tableDadosInseridos.item(i,1).text()))
            self.abrir_dialogo_manual.hide()
            self.pontoSelecionado()
        except:
            pass

    def clickSalvar(self):
        precipitacao = []
        precipitacao.append(['UF',self.abrir_dialogo_manual.txtManualUF.text()])
        precipitacao.append(['Cidade',self.abrir_dialogo_manual.txtManualCidade.text()])
        precipitacao.append(['Nome do Posto',self.abrir_dialogo_manual.txtManualPosto.text()])
        precipitacao.append(['Latitude',self.abrir_dialogo_manual.txtManualLatitude.text()])
        precipitacao.append(['Longitude',self.abrir_dialogo_manual.txtManualLongitude.text()])
        precipitacao.append(['Código',self.abrir_dialogo_manual.txtManualCodigo.text()])
        precipitacao.append(['Qtd. Anos',self.abrir_dialogo_manual.tableDadosInseridos.rowCount()])
        precipitacao.append(['Ano','Máxima'])
        for i in range(0,self.abrir_dialogo_manual.tableDadosInseridos.rowCount(),1):
            precipitacao.append([self.abrir_dialogo_manual.tableDadosInseridos.item(i,0).text(),self.abrir_dialogo_manual.tableDadosInseridos.item(i,1).text()])
        save(precipitacao)

    def clickEditar(self):
        indices = self.abrir_dialogo_manual.tableDadosInseridos.selectionModel().selectedRows()
        if indices == []:
            self.error("Dados não selecionados", " Selecione a linha que deseja editar.")
            return False

        else:
            self.abrir_dialogo_editar = dialogEditarLinha()
            self.abrir_dialogo_editar.show()
            self.abrir_dialogo_editar.btnInserir.clicked.connect(self.clickInserirEditado)
            
    def clickInserirEditado(self):
        self.abrir_dialogo_editar.hide()
        indice = self.abrir_dialogo_manual.tableDadosInseridos.selectionModel().selectedRows()
        for index in sorted(indice):
                self.abrir_dialogo_manual.tableDadosInseridos.setItem(index.row(),0, QTableWidgetItem(self.abrir_dialogo_editar.txtAno.text()))
                self.abrir_dialogo_manual.tableDadosInseridos.setItem(index.row(),1, QTableWidgetItem(self.abrir_dialogo_editar.txtPrecipitacao.text()))
                self.abrir_dialogo_editar.txtAno.clear()
                self.abrir_dialogo_editar.txtPrecipitacao.clear()
        self.abrir_dialogo_editar.hide()

    def error(self, tipo, mensagem):
        #Função de mostrar erro
        self.iface.messageBar().pushMessage(tipo, mensagem, level=Qgis.Warning)        
        
    def clickApagar(self):
        indices = self.abrir_dialogo_manual.tableDadosInseridos.selectionModel().selectedRows()
        if indices == []:
            self.error("Dados não selecionados", " Selecione a linha que deseja apagar.")
            return False  

        else:
            for index in sorted(indices):
                self.abrir_dialogo_manual.tableDadosInseridos.removeRow(index.row())


    def clickDadosEstatistico(self):        
        self.dadosPrecipitacao()
        self.abrir_dialogo = dialogDadosEstatisticos()
        self.abrir_dialogo.show()
        self.abrir_dialogo.btnCalcular.clicked.connect(self.clickCalculoEstatistica)
        self.abrir_dialogo.btnProximo.clicked.connect(self.clickProximoDistribuicoes)

    def clickProximoDistribuicoes(self):
        #Janela Resumo das distribuições
        self.abrir_dialogo = dialogResumoDistribuicoes()
        self.abrir_dialogo.show()
        #Botão para mostrar os resultados dos cálculos
        self.abrir_dialogo.btnResultados.clicked.connect(self.clickMostrarResultados)
        #Janela do Teste QuiQuadrado
        self.abrir_dialogo_quiquadrado = dialogQuiQuadrado()
        self.abrir_dialogo_quiquadrado.btnCalcularQuiQuadrado.clicked.connect(self.clickCalcularQuiQuadrado)
        self.abrir_dialogo_quiquadrado.btnVoltarQuiQuadrado.clicked.connect(self.abrir_dialogo_quiquadrado.hide)
        #Janela do Índice de comparação
        self.abrir_dialogo_IndiceComparacao = dialogIndiceComparacao()
        self.abrir_dialogo_IndiceComparacao.btnCalcularIC.clicked.connect(self.clickCalcularIndiceComparacao)
        self.abrir_dialogo_IndiceComparacao.btnVoltarIC.clicked.connect(self.abrir_dialogo_IndiceComparacao.hide)
        #Janela do Teste Kolmogorov-Smirnov
        self.abrir_dialogo_KolmogorovSmirnov = dialogKolmogorovSmirnov()
        self.abrir_dialogo_KolmogorovSmirnov.btnCalcularKS.clicked.connect(self.clickCalcularKolmogorovSmirnov)
        self.abrir_dialogo_KolmogorovSmirnov.btnVoltarKS.clicked.connect(self.abrir_dialogo_KolmogorovSmirnov.hide)

        #Botão para acessar a próxima janela
        self.abrir_dialogo.btnProximoFinal.clicked.connect(self.clickProximoFinal)
     
        #BOTÕES DETALHES
        #DISTRIBUIÇÃO GAMMA II
        self.abrir_dialogo.btnQuiGammaII.clicked.connect(self.clickQuiQuadradoGammaII)
        self.abrir_dialogo.btnIndiceGammaII.clicked.connect(self.clickIndiceComparacaoGammaII)
        self.abrir_dialogo.btnKSGammaII.clicked.connect(self.clickKolmogorovSmirnovGammaII)
        #DISTRIBUIÇÃO GAMMA III
        self.abrir_dialogo.btnQuiGammaIII.clicked.connect(self.clickQuiQuadradoGammaIII)
        self.abrir_dialogo.btnIndiceGammaIII.clicked.connect(self.clickIndiceComparacaoGammaIII)
        self.abrir_dialogo.btnKSGammaIII.clicked.connect(self.clickKolmogorovSmirnovGammaIII)
        #DISTRIBUIÇÃO LOGNORMAL II
        self.abrir_dialogo.btnQuiLognormalII.clicked.connect(self.clickQuiQuadradoLognormalII)
        self.abrir_dialogo.btnIndiceLognormalII.clicked.connect(self.clickIndiceComparacaoLognormalII)
        self.abrir_dialogo.btnKSLognormalII.clicked.connect(self.clickKolmogorovSmirnovLognormalII)
        #DISTRIBUIÇÃO LOGNORMAL III
        self.abrir_dialogo.btnQuiLognormalIII.clicked.connect(self.clickQuiQuadradoLognormalIII)
        self.abrir_dialogo.btnIndiceLognormalIII.clicked.connect(self.clickIndiceComparacaoLognormalIII)
        self.abrir_dialogo.btnKSLognormalIII.clicked.connect(self.clickKolmogorovSmirnovLognormalIII)
        #DISTRIBUIÇÃO GUMBEL
        self.abrir_dialogo.btnQuiGumbel.clicked.connect(self.clickQuiQuadradoGumbel)
        self.abrir_dialogo.btnIndiceGumbel.clicked.connect(self.clickIndiceComparacaoGumbel)
        self.abrir_dialogo.btnKSGumbel.clicked.connect(self.clickKolmogorovSmirnovGumbel)
   
    def clickQuiQuadradoGammaII(self):
        self.abrir_dialogo_quiquadrado.show()
        global numDist
        numDist = 1
    
    def clickIndiceComparacaoGammaII(self):
        self.abrir_dialogo_IndiceComparacao.show()
        global numDist
        numDist = 1
        
    def clickKolmogorovSmirnovGammaII(self):
        self.abrir_dialogo_KolmogorovSmirnov.show()
        global numDist
        numDist = 1
    
    def clickQuiQuadradoGammaIII(self):
        self.abrir_dialogo_quiquadrado.show()
        global numDist
        numDist = 2
        
    def clickIndiceComparacaoGammaIII(self):
        self.abrir_dialogo_IndiceComparacao.show()
        global numDist
        numDist = 2

    def clickKolmogorovSmirnovGammaIII(self):
        self.abrir_dialogo_KolmogorovSmirnov.show()
        global numDist
        numDist = 2
        
    def clickQuiQuadradoLognormalII(self):
        self.abrir_dialogo_quiquadrado.show()
        global numDist
        numDist = 3
        
    def clickIndiceComparacaoLognormalII(self):
        self.abrir_dialogo_IndiceComparacao.show()
        global numDist
        numDist = 3

    def clickKolmogorovSmirnovLognormalII(self):
        self.abrir_dialogo_KolmogorovSmirnov.show()
        global numDist
        numDist = 3
        
    def clickQuiQuadradoLognormalIII(self):
        self.abrir_dialogo_quiquadrado.show()
        global numDist
        numDist = 4
        
    def clickIndiceComparacaoLognormalIII(self):
        self.abrir_dialogo_IndiceComparacao.show()
        global numDist
        numDist = 4

    def clickKolmogorovSmirnovLognormalIII(self):
        self.abrir_dialogo_KolmogorovSmirnov.show()
        global numDist
        numDist = 4        

    def clickQuiQuadradoGumbel(self):
        self.abrir_dialogo_quiquadrado.show()
        global numDist
        numDist = 5
        
    def clickIndiceComparacaoGumbel(self):
        self.abrir_dialogo_IndiceComparacao.show()
        global numDist
        numDist = 5

    def clickKolmogorovSmirnovGumbel(self):
        self.abrir_dialogo_KolmogorovSmirnov.show()
        global numDist
        numDist = 5

    def distEscolhida(self):
        global distribuicaoEscolhida
        if self.abrir_dialogo.btnRadioGammaII.isChecked() == True:
            distribuicaoEscolhida = 1
        if self.abrir_dialogo.btnRadioGammaIII.isChecked() == True:
            distribuicaoEscolhida = 2
        if self.abrir_dialogo.btnRadioLognormalII.isChecked() == True:
            distribuicaoEscolhida = 3
        if self.abrir_dialogo.btnRadioLognormalIII.isChecked() == True:
            distribuicaoEscolhida = 4
        if self.abrir_dialogo.btnRadioGumbel.isChecked() == True:
            distribuicaoEscolhida = 5
        return distribuicaoEscolhida



    def getPlugin(self):
        #Pega o caminho do plugin
        plugin_dir = os.path.dirname(os.path.realpath(__file__))
        return plugin_dir
        
    
    def clickProximoFinal(self):
        self.distEscolhida()
        self.abrir_dialogo = dialogCalculoFinal()
        self.abrir_dialogo.show()
        self.calculoParametros()
        self.abrir_dialogo.btnCalcular.clicked.connect(self.clickCalcular)
        self.abrir_dialogo.btnSalvar.clicked.connect(self.clickSalvarResultado)
        self.abrir_dialogo.btnFechar.clicked.connect(self.clickFecharPrograma)
        
    def calculoParametros(self):
        if isozona == "A":
            isozonaEscolhida = 0
        elif isozona == "B":
            isozonaEscolhida = 1
        elif isozona == "C":
            isozonaEscolhida = 2
        elif isozona == "D":
            isozonaEscolhida = 3
        elif isozona == "E":
            isozonaEscolhida = 4
        elif isozona == "F":
            isozonaEscolhida = 5
        elif isozona == "G":
            isozonaEscolhida = 6
        elif isozona == "H":
            isozonaEscolhida = 7
        matrizPChMax, matrizPIntMax, parametroA, parametroB, parametroC, parametroN, parametroSFinal = resultadoFinal(maximas,isozonaEscolhida, distribuicaoEscolhida)
        for i in range(0,8):
            self.abrir_dialogo.tableIntensidadesChuvas.insertRow(i)
            self.abrir_dialogo.tableIntensidadesChuvas.setItem(i,0, QTableWidgetItem(str(matrizPChMax[i+1][0])))
            for j in range(1,12):
                if j <= 3:
                    self.abrir_dialogo.tableIntensidadesChuvas.setItem(i,j, QTableWidgetItem(str(round((matrizPChMax[i+1][j]),3))))
                    self.abrir_dialogo.tableIntensidadesChuvas.setItem(i,j+3, QTableWidgetItem(str(round((matrizPIntMax[i+1][j]),3))))
                else:
                    self.abrir_dialogo.tableIntensidadesChuvas.setItem(i,j+3, QTableWidgetItem(str(round((matrizPIntMax[i+1][j]),3))))
        self.abrir_dialogo.txtParametroA.setText(str(round(parametroA,3)))
        self.abrir_dialogo.txtParametroB.setText(str(round(parametroB,3)))
        self.abrir_dialogo.txtParametroC.setText(str(round(parametroC,3)))
        self.abrir_dialogo.txtParametroN.setText(str(round(parametroN,3)))
        self.abrir_dialogo.txtParametroS.setText(str(round(parametroSFinal,3)))

    def clickCalcular(self):
        pA = float(self.abrir_dialogo.txtParametroA.text())
        pB = float(self.abrir_dialogo.txtParametroB.text())
        pC = float(self.abrir_dialogo.txtParametroC.text())
        pS = float(self.abrir_dialogo.txtParametroS.text())
        pN = float(self.abrir_dialogo.txtParametroN.text())
        tempoR =float(self.abrir_dialogo.txtTempoRetorno.text())
        duracao = float(self.abrir_dialogo.txtDuracao.text())
         
        intensMin = (pA * math.pow((tempoR+ pS), pB)) / (math.pow((duracao + pC), pN))
        intensHora = intensMin * 60
        self.abrir_dialogo.txtResultadoMinuto.setText(str(round(intensMin,2)))
        self.abrir_dialogo.txtResultadoHora.setText(str(round(intensHora,2)))
        return pA, pB, pC, pS, pN

    def clickSalvarResultado(self):
        #Dados do posto
        est = self.abrir_dialogo_inicio.txtUF.text()
        cid = self.abrir_dialogo_inicio.txtCidade.text()
        cod = self.abrir_dialogo_inicio.txtCodigo.text()
        posto = self.abrir_dialogo_inicio.txtPosto.text()
        lat = self.abrir_dialogo_inicio.txtLatitude.text()
        long = self.abrir_dialogo_inicio.txtLongitude.text()

        #Districuição de probabilidade
        if distribuicaoEscolhida == 1:
            dist = 'Gamma II'
        if distribuicaoEscolhida == 2:
            dist = 'Gamma III'
        if distribuicaoEscolhida == 3:
            dist = 'Lognormal II'
        if distribuicaoEscolhida == 4:
            dist = 'Lognormal III'
        if distribuicaoEscolhida == 5:
            dist = 'Gumbel'
        #dist
        #isozona
        
        #Parâmetros da equação IDF
        pA = self.abrir_dialogo.txtParametroA.text()
        pB = self.abrir_dialogo.txtParametroB.text()
        pC = self.abrir_dialogo.txtParametroC.text()
        pS = self.abrir_dialogo.txtParametroS.text()
        pN = self.abrir_dialogo.txtParametroN.text()
    
    
        fileName = QFileDialog.getSaveFileName(None, 'Salvar Como...', '','PDF (*.pdf)')
    
        arquivo = str(fileName[0])
        sv = Save_PDF(est, cid, cod, posto, lat, long, qntAnos, precipitacao, md, var, dp, ca, dist, isozona, pA, pB, pC, pS, pN, arquivo)
        sv.main()
        iface . messageBar () . pushMessage ( "Atenção" ,  "PDF salvo com sucesso" ,  level = Qgis.Info, duration=3)
    
   
    def clickFecharPrograma(self):
        self.abrir_dialogo_inicio.txtUF.clear()
        self.abrir_dialogo_inicio.txtCidade.clear()
        self.abrir_dialogo_inicio.txtPosto.clear()
        self.abrir_dialogo_inicio.txtLatitude.clear()
        self.abrir_dialogo_inicio.txtLongitude.clear()
        self.abrir_dialogo_inicio.txtCodigo.clear()
        for i in reversed(range(self.abrir_dialogo_inicio.tableValores.rowCount())):
            self.abrir_dialogo_inicio.tableValores.removeRow(i)
        self.abrir_dialogo.close()
        self.abrir_dialogo_inicio.close()

        

    def clickMapa(self):
        mapcanvas = iface.mapCanvas()
        layers = mapcanvas.layers()
        if len(layers)==14:
            QgsProject.instance().removeMapLayer(layers[0].id())
        self.abrir_dialogo_inicio.hide()
        self.layer = iface.activeLayer()
        self.canvas= iface.mapCanvas()
        self.canvas.setSelectionColor( QColor("red") )
        self.linetool=QgsMapToolIdentifyFeature(self.canvas)
        self.linetool.setLayer(self.layer)
        self.linetool.featureIdentified.connect(self.identify)
        self.canvas.setMapTool(self.linetool)
        self.canvas.setCursor(Qt.CrossCursor)


    def identify(self, feature):
        self.abrir_dialogo_inicio.show()
        feature_id=feature.id()
        feature_codigo=feature["Codigo"]
        feature_UF=feature["UF"]
        codigo = str(feature_codigo)
        if len(codigo)==6:
            codigo = '00'+ codigo
        else:
            codigo = '0'+ codigo
        plugin_dir = self.getPlugin()
        arquivo = plugin_dir +'\postos/'+feature_UF+'/chuvas_C_'+codigo+'.txt'
        self.preencheDialogbase(arquivo)
        self.pontoSelecionado()

    def pontoSelecionado(self):         
        point_layer = QgsVectorLayer("Point?crs=EPSG:4326", "Posto Selecionado", "memory")
        provider = point_layer.dataProvider()
        # Adiciona primeiro ponto
        pt = QgsFeature()
        point = QgsPointXY(float(long), float(lat))
        pt.setGeometry(QgsGeometry.fromPointXY(point))
        provider.addFeatures([pt])
        # Diz para o vetor ponto para buscar mudanças com o provedor
        point_layer.updateExtents()
        point_layer.renderer().symbol().setSize(3)
        QgsProject.instance().addMapLayer(point_layer)


    def isozonaLocalizacaoPosto(self):
        mapcanvas = iface.mapCanvas()

        layers = mapcanvas.layers()
        
        points = layers[0]
        
        for i in range(6,14):
            poly = layers[i]
        
            # Get features and geometry from polygon layer
            feats_poly = poly.getFeatures()
            for feat in feats_poly:
                geom_poly = feat.geometry()
                 
                # Get features from point layer
                feats_point =points.getFeatures()
                 
                # Select the intersecting features
                for feature in feats_point:
                    if feature.geometry().intersects(geom_poly):
                        if not points.select(feature.id()):
                            a = str(layers[i].id())
        return a[8]
    
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started


        # show the dialog
        self.abrir_dialogo_inicio.show()
        
        plugin_dir = self.getPlugin()
        #Adiciona os shapes das isozonas as variáveis
        layerIsozonaA = QgsVectorLayer(plugin_dir +"/isozonas_shp/IsoA.shp", "Isozona A", "ogr")
        layerIsozonaA = QgsVectorLayer(plugin_dir +"/isozonas_shp/IsoA.shp", "Isozona A", "ogr")
        layerIsozonaB = QgsVectorLayer(plugin_dir +"/isozonas_shp/IsoB.shp", "Isozona B", "ogr")
        layerIsozonaC = QgsVectorLayer(plugin_dir +"/isozonas_shp/IsoC.shp", "Isozona C", "ogr")
        layerIsozonaD = QgsVectorLayer(plugin_dir +"/isozonas_shp/IsoD.shp", "Isozona D", "ogr")
        layerIsozonaE = QgsVectorLayer(plugin_dir +"/isozonas_shp/IsoE.shp", "Isozona E", "ogr")
        layerIsozonaF = QgsVectorLayer(plugin_dir +"/isozonas_shp/IsoF.shp", "Isozona F", "ogr")
        layerIsozonaG = QgsVectorLayer(plugin_dir +"/isozonas_shp/IsoG.shp", "Isozona G", "ogr")
        layerIsozonaH = QgsVectorLayer(plugin_dir +"/isozonas_shp/IsoH.shp", "Isozona H", "ogr")
        #Atribui cor aos shapes das isozonas
        layerIsozonaA.renderer().symbol().setColor(QColor(47, 119, 252))
        layerIsozonaB.renderer().symbol().setColor(QColor(43, 205, 239))
        layerIsozonaC.renderer().symbol().setColor(QColor(145, 212, 207))
        layerIsozonaD.renderer().symbol().setColor(QColor(210, 241, 165))
        layerIsozonaE.renderer().symbol().setColor(QColor(255, 222, 30))
        layerIsozonaF.renderer().symbol().setColor(QColor(251, 151, 8))
        layerIsozonaG.renderer().symbol().setColor(QColor(254, 78, 21))       
        layerIsozonaH.renderer().symbol().setColor(QColor(255, 0, 0))
        #Adiciona ao mapa os shapes das isozonas
        QgsProject.instance().addMapLayers([layerIsozonaA,layerIsozonaB,layerIsozonaC,layerIsozonaD,layerIsozonaE,layerIsozonaF,layerIsozonaG,layerIsozonaH])

        #Adiciona os shapes dos estados e municipios as variáveis
        layerLimitesMunicipios = QgsVectorLayer(plugin_dir +"/est_mun_shp/lim_municipio_a.shp", "Limite Municípios", "ogr")
        layerLimitesEstados = QgsVectorLayer(plugin_dir +"/est_mun_shp/lim_unidade_federacao_a.shp", "Limite Estados", "ogr")
        layerLCidades = QgsVectorLayer(plugin_dir +"/est_mun_shp/loc_cidade_p.shp", "Cidades", "ogr")
        layerLCapitais = QgsVectorLayer(plugin_dir +"/est_mun_shp/loc_capital_p.shp", "Capitais", "ogr")

        layerLimitesMunicipios.renderer().symbol().setColor(QColor('Transparent'))
        layerLimitesEstados.renderer().symbol().setColor(QColor('Transparent'))
        layerLCidades.renderer().symbol().setColor(QColor('darkRed'))
        layerLCapitais.renderer().symbol().setColor(QColor('white'))

        layerLimitesEstados.renderer().symbol().symbolLayer(0).setStrokeColor(QColor('white'))
        layerLimitesMunicipios.renderer().symbol().symbolLayer(0).setStrokeColor(QColor('darkRed'))
        layerLimitesEstados.renderer().symbol().symbolLayer(0).setStrokeWidth(0.9)

        layerLCidades.renderer().symbol().setSize(1)
        
        #Adiciona o shape dos postos a variável
        layerPostos = QgsVectorLayer(plugin_dir +"/postos_Brasil_shp/postos_BR.shp", "Postos", "ogr")
        layerPostos.renderer().symbol().setColor(QColor('gray'))
        layerPostos.renderer().symbol().setSize(1.5)

        text_format = QgsTextFormat()
        label = QgsPalLayerSettings()
        label.fieldName = 'nome'
        label.enabled = True
        label.setFormat(text_format)
        labeler = QgsVectorLayerSimpleLabeling(label)
        layerLCidades.setLabelsEnabled(True)
        layerLCidades.setLabeling(labeler)
        layerLCidades.triggerRepaint()
        
        text_format = QgsTextFormat()
        label = QgsPalLayerSettings()
        label.fieldName = 'nome'
        label.enabled = True
        label.setFormat(text_format)
        labeler = QgsVectorLayerSimpleLabeling(label)
        layerLCapitais.setLabelsEnabled(True)
        layerLCapitais.setLabeling(labeler)
        layerLCapitais.triggerRepaint()
        
        text_format = QgsTextFormat()
        label = QgsPalLayerSettings()
        label.fieldName = 'NomePosto'
        label.enabled = True
        label.setFormat(text_format)
        labeler = QgsVectorLayerSimpleLabeling(label)
        layerPostos.setLabelsEnabled(True)
        layerPostos.setLabeling(labeler)
        layerPostos.triggerRepaint()

        #Adiciona ao mapa os shapes das cidades e municipios
        QgsProject.instance().addMapLayers([layerPostos, layerLimitesMunicipios,layerLCidades,layerLimitesEstados,layerLCapitais])


        # Run the dialog event loop
        result = self.abrir_dialogo_inicio.exec_()
        # See if OK was pressed
        if result == QFileDialog.Rejected:
            return QgsProject.instance().removeAllMapLayers()
